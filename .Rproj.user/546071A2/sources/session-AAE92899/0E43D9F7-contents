x = as(otu_table(delivery), "matrix")
colnames(x)= tax_table(delivery)[,"ASV"]
x= x[,apply(otu_table(delivery), 2, function(x)sum(x)>0)]

y= as(phyloseq::sample_data(delivery), "data.frame")
bool = sapply(sample_data(delivery), unique)


new_y = NULL
new_x = NULL

for(col in 1:length(colnames(y))){ #check the variables before running plsda
  # print(col)
  if(length(bool[[col]])==1 | ((anyNA(y[,col]) | any(str_detect(y[,col], "NA"))) & length(bool[[col]])==2)){ # is the col as only one condition
    print(paste(colnames(y)[col], ": vector of 1 condition"))
    
  } else if(anyNA(y[,col]) & length(bool[[col]])>=2){ # remove NA
    # print(paste(colnames(y)[col], "contains NA"))
    new_x[[colnames(y)[col]]] = x[!is.na(y[,col]),]
    new_y[[colnames(y)[col]]] = y[!is.na(y[,col]), col]
    
  } else if(any(str_detect(y[,col], "NA")) & length(bool[[col]])>=2){ # remove "NA" values
    new_x[[colnames(y)[col]]] = x[str_detect(y[,col], "NA"),]
    new_y[[colnames(y)[col]]] = y[!str_detect(y[,col], "NA"), col]
    
  } else if(length(bool[[col]])==length(y[,col])){
    print(paste(colnames(y)[col], ": is constituted of unique observations"))
    
  } else if (length(bool[[col]])>=2 & !anyNA(y[,col])) {
    # print(paste(colnames(y)[col],"is good to go"))
    new_y[[colnames(y)[col]]] = y[,col] # make use only of the columns that a good for plsda
    new_x[[colnames(y)[col]]] = x
  }
  
}
x=NULL
for(i in c("random", "grid")){
  control = trainControl(method="repeatedcv", number = 10, repeats=3, search = i)
  
  
 x[[i]] = caret::train(x=new_x$cluster_h_bray, y=new_y$cluster_h_bray, method= "glmnet", metric="Accuracy", trControl=control)
}



index = createDataPartition(new_y$allergies, list = F, p = 0.5)
train=NULL
train$y= new_y$allergies[index]
train$x= new_x$allergies[index,]
pred= NULL
pred$y= new_y$allergies[-index]
pred$x= new_x$allergies[-index,]


control <- trainControl(method = "repeatedcv", number = 10, repeats = 3, search = "random")




rf= train(train$x, train$y, method="rf", trControl=control)
rf_predictions <- predict(rf, newdata = pred$x)
res= confusionMatrix(rf_predictions, factor(pred$y))
res
conf=NULL
library(foreach)
cl= makeCluster(20)
doParallel::registerDoParallel(cl)

control <- trainControl(method = "repeatedcv", number = 10, repeats = 3, search = "random")
conf=foreach(1:1000) %dopar% {
  library(caret)
index = caret::createDataPartition(new_y$allergies, list = F, p = 0.5)
train=NULL
train$y= new_y$allergies[index]
train$x= new_x$allergies[index,]
pred= NULL
pred$y= new_y$allergies[-index]
pred$x= new_x$allergies[-index,]

  model =caret::plsda(x = train$x,  y= as.factor(train$y), ncomp=20, )
  model= train(train$x, train$y, method="glmnet", trControl=control)
pred_model= predict(model, newdata= pred$x)

 confusionMatrix(pred_model, factor(pred$y))

}
stopCluster(cl)


res= sapply(conf, "[[",3, simplify = T) %>% as.data.frame() %>% t
max(res[,1])
density(res[,1])%>% plot

plot(perf.splsda.srbct)
dist=delivery%>%
  subset_samples(asthma_1_year=="yes"| asthma_1_year=="no")%>%
  phyloseq::distance( "bray")
sample_data(delivery)$breastfeeding= gsub(sample_data(delivery)$breastfeeding, pattern = "non_breastfed", replacement = "n-BF")
sample_data(delivery)$breastfeeding= gsub(sample_data(delivery)$breastfeeding, pattern = "breastfed", replacement = "BF")
pc=  ade4::dudi.pco(dist, scannf = F, nf=10)


index = createDataPartition(new_y$asthma_1_year, list = F, p = 0.5)
X= pc$li[index,]
Y= new_y$asthma_1_year[index]
test_x= pc$li[-index,]
test_y= new_y$asthma_1_year[-index]

res = train(X, Y, method="glmnet")
predictions <- predict(res, newdata = test_x)
conf= confusionMatrix(predictions, as.factor(test_y))
