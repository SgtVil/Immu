annot2
devtools::document()
library(ImmuMicrobiome)
library(ImmuMicrobiome)
library(ImmuMicrobiome)
View(slide_z)
library(ImmuMicrobiome)
knit_with_parameters("~/ImmuMicrobiome/ImmuMicrobiome_book.Rmd")
browseVignettes("ImmuMicrobiome")
knitr::include_graphics("C:\Users\remy.villette\Documents\Documentation ImmuMicrobiome/Z test.png")
knitr::include_graphics("Documentation ImmuMicrobiome/Z test.png")
knitr::include_graphics("~/Documentation ImmuMicrobiome/Z test.png")
library(ImmuMicrobiome)
devtools::install_github("SgtVil/ImmuMicrobiome")
devtools::install_github("SgtVil/ImmuMicrobiome@master")
library(ImmuMicrobiome)
library(rstatix)
library(ggpubr)
theme_set(theme_bw()+
theme(axis.text = element_text(size=10, face="bold"),
axis.title = element_text(size=12, face="bold")))
tol21rainbow= c("#771155", "#AA4488", "#CC99BB", "#114477",
"#4477AA", "#77AADD", "#117777", "#44AAAA",
"#77CCCC", "#117744", "#44AA77", "#88CCAA",
"#777711", "#AAAA44", "#DDDD77", "#774411",
"#AA7744", "#DDAA77", "#771122", "#AA4455",
"#DD7788")
theme_set(theme_bw()+
theme(text = element_text(size=15, face="bold")))
knitr::opts_chunk$set(tidy=T,
message=F,
cache=T,
fig.show="hold",
fig.align = "center")
# knitr::include_graphics("Igaseq plots/plotly/MO101sample_id_vs_new_vs_pos_random generation_ratio_intensity_ellipse.html")
knitr::include_graphics("vignettes/MO101_random generation_.png")
# knitr::include_graphics("Igaseq plots/plotly/MO101sample_id_vs_new_vs_pos_random generation_ratio_intensity_ellipse.html")
knitr::include_graphics("/vignettes/MO101_random generation_.png")
# knitr::include_graphics("Igaseq plots/plotly/MO101sample_id_vs_new_vs_pos_random generation_ratio_intensity_ellipse.html")
knitr::include_graphics("./vignettes/MO101_random generation_.png")
getwd()
# knitr::include_graphics("Igaseq plots/plotly/MO101sample_id_vs_new_vs_pos_random generation_ratio_intensity_ellipse.html")
knitr::include_graphics("~/ImmuMicrobiome/vignettes/MO101_random generation_.png")
devtools::install_github("SgtVil/ImmuMicrobiome@master")
devtools::install_github("SgtVil/ImmuMicrobiome@master")
library(ImmuMicrobiome)
devtools::document()
warnings()
gc()
library(ImmuMicrobiome)
library(rstatix)
library(ggpubr)
theme_set(theme_bw()+
theme(axis.text = element_text(size=10, face="bold"),
axis.title = element_text(size=12, face="bold")))
tol21rainbow= c("#771155", "#AA4488", "#CC99BB", "#114477",
"#4477AA", "#77AADD", "#117777", "#44AAAA",
"#77CCCC", "#117744", "#44AA77", "#88CCAA",
"#777711", "#AAAA44", "#DDDD77", "#774411",
"#AA7744", "#DDAA77", "#771122", "#AA4455",
"#DD7788")
theme_set(theme_bw()+
theme(text = element_text(size=15, face="bold")))
knitr::opts_chunk$set(tidy=T,
message=F,
cache=T,
fig.show="hold",
fig.align = "center")
plot_plsda(results, top.loads = 20, color_vector = c("brown","orange"))
results = mixOmics::plsda(X= metabolomic[,5:217], Y= metabolomic$birth_type)
plot_plsda(results, top.loads = 20, color_vector = c("brown","orange"))
library(ImmuMicrobiome)
usethis::use_github()
git_default_branch_rediscover()
usethis::git_default_branch_rediscover()
devtools::install_github("SgtVil/ImmuMicrobiome")
usethis::use_github()
library(ImmuMicrobiome)
usethis::use_github()
devtools::install_github("SgtVil/ImmuMicrobiome")
devtools::install_github("SgtVil/ImmuMicrobiome", force=T)
browseVignettes("ImmuMicrobiome")
detach("package:ImmuMicrobiome", unload = TRUE)
devtools::install_github("SgtVil/ImmuMicrobiome", force=T, build_vignettes = T)
devtools::install_github("SgtVil/ImmuMicrobiome", force=T)
library(ImmuMicrobiome)
devtools::document()
library(ImmuMicrobiome)
detach("package:ImmuMicrobiome", unload = TRUE)
devtools::install_github("SgtVil/ImmuMicrobiome", force=T)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(ImmuMicrobiome)
ImmuMicrobiome
devtools::document()
library(ImmuMicrobiome)
browseVignettes("ImmuMicrobiome")
devtools::install_github("SgtVil/ImmuMicrobiome", force=T)
detach("package:ImmuMicrobiome", unload = TRUE)
devtools::install_github("SgtVil/ImmuMicrobiome", force=T)
devtools::install_github("SgtVil/ImmuMicrobiome", force=T)
?neg_dispersion
library(ImmuMicrobiome)
?neg_dispersion
devtools::document()
warnings()
?vcountPattern
ig_seq
View(slide_z)
gc()
gc()
?list_transpose
View(summarise_fastq())
View(summarise_fastq)
devtools::document()
warnings
warnings()
devtools::document()
warnings()
data(metabolomic)
# RDA based on metabolomic data and constrained to breastfeeding status and gender.
res= plot_constrained_reduction( metabolomic, clinical_data = 1:5,
stat="envfit", method = "RDA", model = "breastfeeding+sex",
group = "birth_type", type="arrows")
plot_constrained_reduction( metabolomic, clinical_data = 1:5,
stat="envfit", method = "RDA", model = "breastfeeding+sex",
group = "birth_type", type="arrows")
method = "CCA", text = T, color_vector = tol21rainbow)
res = plot_constrained_reduction(metabolomic, model =  model = "breastfeeding+sex", group = "Enterotype",
res = plot_constrained_reduction(metabolomic, model = "breastfeeding+sex", group = "Enterotype",
method = "CCA", text = T, color_vector = tol21rainbow)
res = plot_constrained_reduction(metabolomic,  clinical_data = 1:5, model = "breastfeeding+sex", group = "Enterotype",
method = "CCA", text = T, color_vector = tol21rainbow)
res = plot_constrained_reduction(metabolomic, clinical_data = 1:4, stat="envfit", method = "RDA", model = "breastfeeding+sex",
res = plot_constrained_reduction(metabolomic, clinical_data = 1:4, stat="envfit", method = "RDA", model = "breastfeeding+sex",
group = "birth_type", type="arrows")
res = plot_constrained_reduction(metabolomic, clinical_data = 1:4, stat="envfit", method = "CCA", model = "breastfeeding+sex",
group = "birth_type", type="arrows")
res = plot_constrained_reduction(metabolomic,  clinical_data = 1:4, stat="permanova", method = "RDA", model = "breastfeeding+sex",
group = "birth_type", type="arrows")
plot_reduction(mat= metabolomic, clinical_data = 1:4, axis_x=1, axis_y=2, nf= 5,
method= "PCA", type= "arrows", group="birth_type", stat="envfit")
#'# Reduction with arrows for the vectors loading
#'plot_reduction(mat= metabolomic, clinical_data = 1:4, axis_x=1, axis_y=2, nf= 5,
#'  method= "PCA", type= "arrows", group="birth_type", stat="permanova")
#'
#'# Test permanova or envift
#' plot_reduction(mat= metabolomic, clinical_data = 1:4, axis_x=1, axis_y=2, nf= 5,
#'  method= "PCA", type= "arrows", group="birth_type", stat="envfit")
#'
#'
#'
plot_reduction = function(mat,  clinical_data, axis_x=1, axis_y=2, nf= 5, method= "PCA", type= "boxplot",
group=NULL,  dist = "euclidean", stat= "none",
color_vector= c("cyan4","brown","deepskyblue", "black","red"),
legend_title= NULL, lwd=1, conf=0.9, cex=2,
font=2, pch=20, draw= "lines",
ylimits="auto", xlimits= "auto", text=F, ncol=1,
x.intersp = 1, y.intersp=0.5,
where="topleft", inset=0.2,  pca= T, stat.cex= 2, ...){
old.par = par()
on.exit(layout(matrix(c(1,1))))
if(class(dist)=="dist"){
d= dist
} else {
d= vegan::vegdist(mat[, -clinical_data], method = dist)
}
if(is.null(group)){
stop("Need factor to segregate result.")
}
# group= as.factor(group)
fac= mat[,group]
fac= as.factor(fac)
if( method== "PCoA"){
p= vegan::wcmdscale(d, eig = T)
p_li= p$points
}
if(method=="NMDS"){
p= metaMDS(mat[, -clinical_data], distance= dist)
p_li= p$points
ca1 = scores(p, display = "species", scaling="species")[,1]
ca2 = scores(p, display = "species", scaling="species")[,2]
}
if(method== "PCA"){
# p= dudi.pca(as(mat, 'matrix'), scannf = F, nf=5, scale = T, center = T)
p = vegan::rda(as(mat[, -clinical_data], "matrix"), scale=T)
p_li = p$CA$u
# p_li= p$li
ca1 = scores(p, display = "species", scaling="species")[,1]
ca2 = scores(p, display = "species", scaling="species")[,2]
}
if(method=="CA"){
p = cca( as(mat[, -clinical_data], 'matrix'))
p_li= p$CA$u
ca1 = scores(p, display = "species", scaling="species")[,1]
ca2 =scores(p, display = "species", scaling="species")[,2]
}
if(method=="DCA"){
p = decorana( as(mat[, -clinical_data], 'matrix'), )
p_li= scores(p)
ca1 = scores(p, display = "species", scaling="species")[,1]
ca2 = scores(p, display = "species", scaling="species")[,2]
}
if(method=="tsne"){
p = Rtsne::Rtsne( as(mat[, -clinical_data], 'matrix'), pca=pca)
p_li= p$Y
}
if(xlimits=="auto"){
xlimits = c(p_li[,axis_x] %>% max  /0.5, p_li[,1] %>% min  /0.8)
}
if(ylimits=="auto"){
ylimits = c(p_li[,axis_y] %>% max  /0.5, p_li[,2] %>% min  /0.8)
} else {
ylimits= ylim
xlimits= ylim
}
if(stat=="permanova"){
res =adonis2(as.formula(as.formula(paste0("mat[, -clinical_data] ~" , group))),
data = as(mat, "data.frame"),
permutations = 999, na.action = na.exclude,
method = dist)
p.val= paste("PERMANOVA\np=",res$`Pr(>F)`[1])
}
if(stat== "envfit") {
res= vegan::envfit(formula=as.formula(paste0("p ~", group)), data=mat)
p.val = paste("Goodness of fit\np=", res$factors$pvals)
}
col1= color_vector
col1= col1[unique(fac)]
col2=  color_vector
col2= col2[fac]
# #
if(type=="boxplot"){
# prepare the matrix
layout(matrix(c(2,2,2,4,
1,1,1,3,
1,1,1,3,
1,1,1,3),
nrow = 4,
ncol = 4,
byrow = TRUE))
par(mar=c(0,0,0,0))
#1
plot(p_li[,axis_x], p_li[,axis_y], bg= col2, axes=F, xlab="", ylab="", las=2, pch=21, cex=cex, ylim=ylimits, xlim=xlimits, ...)
disp= ordispider(p_li, groups = fac, col = adjustcolor(color_vector, alpha=0.3), lwd=lwd,  ylim=ylimits, xlim=xlimits)
ordiellipse(p_li, groups= fac, conf= conf, col = color_vector, lwd = lwd, draw= draw,  ylim=ylimits, xlim=xlimits)
points(p_li[,axis_x], p_li[,axis_y], bg= col2, xlab="", ylab="", las=2, pch=21, cex=cex, ylim=ylimits, xlim=xlimits, ...)
if(text){
text(x= unique(disp[,1:2]),  labels=unique(group), col="black", cex=cex, font=font)
}
if(stat=="permanova" | stat=="envfit"){
legend(where, inset = 0.2, legend=p.val, bty="n", cex= stat.cex)
}
#2
boxplot(p_li[,axis_x]~fac, data=p_li, horizontal=T, axes=F,  xlab=NULL, ylab=NULL,
col= color_vector , xaxt="n", lwd=lwd/2,  ylim=xlimits)
stripchart(p_li[,axis_x]~fac, data=p_li, method = "jitter", vertical=F, add=T, pch=21,
col= "black", bg="gray", lwd=lwd/2,  ylim=xlimits)
#3
boxplot(p_li[,axis_y]~fac, data=p_li, axes=F,  ylab="", xlab="", col= color_vector, lwd=lwd/2,  ylim=ylimits)
stripchart(p_li[,axis_y]~fac, data=p_li, method = "jitter", vertical=T, add=T, pch=21,
col= "black", bg="gray", lwd=lwd/2,  ylim=ylimits)
# #4
plot(NULL, xlim=c(0,1), ylim=c(0,1), ylab="", xlab="", axes=F)
legend("center", legend=unique(fac), col = col1, title= legend_title, pch= 20,
cex= cex, bty="n", ncol= ncol, y.intersp = y.intersp)
# return(head(p$eig/sum(p$eig)*100,5))
}
if(type=="pure"){
layout(matrix(c(1,1)))
par(mar=c(0.5,0.5,1,0.5))
plot(p_li[,axis_x], p_li[,axis_y], bg= col2, axes=F, xaxt="n", yaxt="n", xlab="", ylab="", las=2, pch=21, cex=cex, ylim=ylimits, xlim=xlimits, ...)
disp= ordispider(p_li, groups = fac, col =  adjustcolor(color_vector, alpha=0.3), lwd=lwd,  ylim=ylimits, xlim=xlimits,)
ordiellipse(p_li, groups= fac, conf= conf, col = adjustcolor(color_vector, alpha=0.3), lwd = lwd, draw= draw,  ylim=ylimits, xlim=xlimits)
points(p_li[,axis_x], p_li[,axis_y], bg= col2,  xlab="", ylab="", las=2, pch=21, cex=cex, ylim=ylimits, xlim=xlimits, ...)
text(x= unique(disp[,1:2]),  labels=unique(fac), col="black", cex=cex, font=font)
# return( head(p$eig/sum(p$eig)*100, 5))
if(stat=="permanova" | stat=="envfit"){
legend(where, inset = 0.2, legend=p.val, bty="n", cex= stat.cex)
}
}
if(type== "arrows"){
if(method=="PCoA") stop("Can't plot loadings for a PCoA, use NMDS for that purpose")
l.pos <-ca2# Create a vector of y axis coordinates
lo <- which(ca2< 0) # Get the variables on the bottom half of the plot
hi <- which(ca2> 0) # Get variables on the top half
# Replace values in the vector
l.pos <- replace(l.pos, lo, "1")
l.pos <- replace(l.pos, hi, "3")
plot(p, type="n",  axes=F, xlab="", ylab="",  bty="n")
abline(h = 0, v = 0, col = "white", lwd = 3)
# plot(p_li[ ,axis_x], p_li[ ,axis_y], xlim= c(min(ca1), max(ca1)), ylim = c(min(ca2), max(ca2)), bg= col2, axes=F, xlab="", ylab="", las=2, pch=21, cex=cex)
disp= ordiellipse(p, groups= fac, conf= conf,  col = adjustcolor(color_vector, alpha=0.3),
lwd = lwd, draw= draw,  xlim= c(min(ca1), max(ca1)), ylim = c(min(ca2), max(ca2)))
disp= ordispider(p, groups = fac, col =  adjustcolor(color_vector, alpha=0.3), lwd=lwd,  xlim= c(min(ca1), max(ca1)), ylim = c(min(ca2), max(ca2)))
points(p, display = "sites",  bg= col2,  xlab="", ylab="", las=2, pch=21, cex=cex)
# points(p_li[,axis_x], p_li[,axis_y], bg= col2,  xlab="", ylab="", las=2, pch=21, cex=cex, xlim= c(min(ca1), max(ca1)), ylim = c(min(ca2), max(ca2)), ...)
arrows(x0=0, x1=ca1, y0= 0, y1= ca2, lwd=lwd/1.5)
text(ca1, ca2, labels=names(ca1), col="black", pos=l.pos, lwd=lwd/1.5, cex=cex/1.5, font=2)
if(text){
text(x= unique(disp[,1:2]),  labels=unique(fac), col="black", cex=cex, font=font)
}
if(stat=="permanova" | stat=="envfit"){
legend(where, inset = 0.2, legend=p.val, bty="n", cex= stat.cex)
}
}
}
plot_reduction(mat= metabolomic, clinical_data = 1:4, axis_x=1, axis_y=2, nf= 5,
method= "PCA", type= "arrows", group="birth_type", stat="envfit")
devtools::document()
warnings()
gc()
library(ImmuMicrobiome)
plot_constrained_reduction()
?plot_constrained_reduction
devtools::document()
warnings()
devtools::document()
install.packages("ggridges")
library(ImmuMicrobiome)
devtools::install_github("SgtVil/ImmuMicrobiome")
devtools::install_github("SgtVil/ImmuMicrobiome")
detach("package:ImmuMicrobiome", unload = TRUE)
devtools::install_github("SgtVil/ImmuMicrobiome")
browseVignettes("ImmuMicrobiome")
devtools::install_github("SgtVil/ImmuMicrobiome", force=T, build = )
devtools::install_github("SgtVil/ImmuMicrobiome", force=T, build_vignettes = T)
devtools::document()
library(ImmuMicrobiome)
devtools::install_github("SgtVil/ImmuMicrobiome", force=T, build_vignettes = T)
devtools::document()
library(ImmuMicrobiome)
library(ImmuMicrobiome)
devtools::document()
warnings()
library(ImmuMicrobiome)
data("metabolomic")
' var = metabolomic %>%
dplyr::select(!child_id) %>%
calculate_variance(clinical_data = 1:3, cores = 1)
var = metabolomic %>%
dplyr::select(!child_id) %>%
calculate_variance(clinical_data = 1:3, cores = 1)
var = metabolomic %>%
dplyr::select(!child_id) %>%
calculate_variance(clinical_data = 1:3, cores = 1)
variance = var
var_exp = variance$variance %>%
dplyr::filter(variable=="var.exp")%>%
tidyr::pivot_longer(names_to = "factor", values_to = "value", cols = !features:variable)%>%
dplyr::full_join(variance$p.value, by=c("features","factor"))%>%
dplyr::full_join(variance$variance %>%
dplyr:: filter(variable=="mean.feat") %>%
tidyr::pivot_longer(names_to = "factor", values_to = "mean.feat", cols = !features:variable),
by=c("features", "factor"))
var_exp
variance$variance %>%
dplyr::filter(variable=="var.exp")%>%
tidyr::pivot_longer(names_to = "factor", values_to = "value", cols = !features:variable)%>%
dplyr::full_join(variance$p.value, by=c("features","factor"))
View(var_exp)
var_exp = variance$variance %>%
dplyr::filter(variable=="var.exp")%>%
tidyr::pivot_longer(names_to = "factor", values_to = "value", cols = !features:variable)%>%
dplyr::full_join(variance$p.value, by=c("features","factor"))%>%
dplyr::bind_rows(variance$variance %>%
dplyr:: filter(variable=="mean.feat") %>%
tidyr::pivot_longer(names_to = "factor", values_to = "mean.feat", cols = !features:variable))
View(var_exp)
var_exp = variance$variance %>%
dplyr::filter(variable=="var.exp")%>%
tidyr::pivot_longer(names_to = "factor", values_to = "value", cols = !features:variable)%>%
dplyr::full_join(variance$p.value, by=c("features","factor"))%>%
dplyr::full_join(variance$variance %>%
dplyr:: filter(variable=="mean.feat") %>%
tidyr::pivot_longer(names_to = "factor", values_to = "mean.feat", cols = !features:variable),
by=c("features", "factor"))
View(var_exp)
if(plot_type=="boxplot"){
p =var_exp %>%
ggplot(aes(y = value, fct_reorder(factor, var_exp%>%
group_by(factor)%>%
mutate(mean.fac = median(value, na.rm=T))%>%
pull(mean.fac))))+
geom_jitter(aes(size=mean.feat, fill= ifelse(p.adj<0.05, col[1],
ifelse(p<0.05, col[2], col[3]))),
shape=21)+
geom_boxplot(size=1.5, alpha=0)+
scale_fill_identity(name = "P values", breaks = c(col),
labels = c("FDR < 0.05", "nFDR < 0.05", "NS"),
guide = "legend")+
guides(size= guide_legend("Mean features"))+
coord_flip()+
theme_bw()+
labs(y="Variance explained by factors")+
theme(axis.text.y = element_text(face="bold"),
axis.title.y = element_blank(),
legend.position = "bottom")
}
plot_type=="boxplot"
if(plot_type=="boxplot"){
p =var_exp %>%
ggplot(aes(y = value, fct_reorder(factor, var_exp%>%
group_by(factor)%>%
mutate(mean.fac = median(value, na.rm=T))%>%
pull(mean.fac))))+
geom_jitter(aes(size=mean.feat, fill= ifelse(p.adj<0.05, col[1],
ifelse(p<0.05, col[2], col[3]))),
shape=21)+
geom_boxplot(size=1.5, alpha=0)+
scale_fill_identity(name = "P values", breaks = c(col),
labels = c("FDR < 0.05", "nFDR < 0.05", "NS"),
guide = "legend")+
guides(size= guide_legend("Mean features"))+
coord_flip()+
theme_bw()+
labs(y="Variance explained by factors")+
theme(axis.text.y = element_text(face="bold"),
axis.title.y = element_blank(),
legend.position = "bottom")
}
plot_type="boxplot"
if(plot_type=="boxplot"){
p =var_exp %>%
ggplot(aes(y = value, fct_reorder(factor, var_exp%>%
group_by(factor)%>%
mutate(mean.fac = median(value, na.rm=T))%>%
pull(mean.fac))))+
geom_jitter(aes(size=mean.feat, fill= ifelse(p.adj<0.05, col[1],
ifelse(p<0.05, col[2], col[3]))),
shape=21)+
geom_boxplot(size=1.5, alpha=0)+
scale_fill_identity(name = "P values", breaks = c(col),
labels = c("FDR < 0.05", "nFDR < 0.05", "NS"),
guide = "legend")+
guides(size= guide_legend("Mean features"))+
coord_flip()+
theme_bw()+
labs(y="Variance explained by factors")+
theme(axis.text.y = element_text(face="bold"),
axis.title.y = element_blank(),
legend.position = "bottom")
}
if(plot_type=="heatmap"){
var_exp = variance$variance %>%
dplyr::filter(variable=="var.exp")%>%
tidyr::pivot_longer(names_to = "factor", values_to = "value", cols = !features:variable)%>%
dplyr::full_join(variance$p.value, by=c("features","factor"))%>%
dplyr::full_join(variance$variance %>%
dplyr:: filter(variable=="mean.feat") %>%
tidyr::pivot_longer(names_to = "factor", values_to = "mean.feat", cols = !features:variable),
by=c("features", "factor"))
top= variance$variance %>%
dplyr::filter(variable=="var.tot")%>%
tidyr::pivot_longer(names_to = "factor", values_to = "value", cols = !features:variable)%>%
dplyr::group_by(features)%>%
dplyr::summarise(mean.fac= mean(value, na.rm=T)) %>%
top_n(top, wt = mean.fac)
p = var_exp %>%
dplyr::filter(features %in% top$features)%>%
ggplot(aes(fct_reorder(features, mean.feat), factor))+
geom_tile(aes(fill=value))+
scale_fill_gradient(high = col[1], low = "white", name="Percent of variance")+
theme(axis.text.x = element_text(angle=90, hjust=1, vjust=0.5),
axis.title = element_blank(),
legend.position = "top")
}
return(p)
p
col= c("brown", "orange", "grey")
if(plot_type=="boxplot"){
p =var_exp %>%
ggplot(aes(y = value, fct_reorder(factor, var_exp%>%
group_by(factor)%>%
mutate(mean.fac = median(value, na.rm=T))%>%
pull(mean.fac))))+
geom_jitter(aes(size=mean.feat, fill= ifelse(p.adj<0.05, col[1],
ifelse(p<0.05, col[2], col[3]))),
shape=21)+
geom_boxplot(size=1.5, alpha=0)+
scale_fill_identity(name = "P values", breaks = c(col),
labels = c("FDR < 0.05", "nFDR < 0.05", "NS"),
guide = "legend")+
guides(size= guide_legend("Mean features"))+
coord_flip()+
theme_bw()+
labs(y="Variance explained by factors")+
theme(axis.text.y = element_text(face="bold"),
axis.title.y = element_blank(),
legend.position = "bottom")
}
p
rm(var_exp)
rm(variance)
plot_all_variance(var)
library(ImmuMicrobiome)
plot_all_variance(var)
library(ImmuMicrobiome)
library(ImmuMicrobiome)
library(ImmuMicrobiome)
devtools::document()
library(ImmuMicrobiome)
devtools::document()
warnings()
library(ImmuMicrobiome)
library(ImmuMicrobiome)
library(ImmuMicrobiome)
devtools::document()
warnings()
library(ImmuMicrobiome)
