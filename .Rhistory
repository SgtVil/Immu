#                   bacterial_loading = loads,
#                   res_prediction = pred_model,
#                   res_conf_matrix = conf,
#                   data= list(X= x,
#                              Y= y,
#                              train_y= prep_data$train_y[[i]],
#                              train_x= prep_data$train_x[[i]],
#                              pred_x= prep_data$pred_x[[i]],
#                              pred_y= prep_data$pred_y[[i]]))
},
mc.cores = cores)
i=3
length(prep_data$train_y)
x = prep_data$train_x[[i]]
y = prep_data$train_y[[i]]
names(prep_data[[i]])
# cat("Computing for", names(prep_data[[i]]))
res = caret::plsda(x =  prep_data$train_x[[i]],  y= as.factor(prep_data$train_y[[i]]), ncomp=ncomp)
res
res_model= mclapply(X = 1:length(prep_data$train_y),
FUN = function(i){
x = prep_data$train_x[[i]]
y = prep_data$train_y[[i]]
cat("Computing for",i, "\n")
res = caret::plsda(x =  prep_data$train_x[[i]],  y= as.factor(prep_data$train_y[[i]]), ncomp=ncomp)
# pred_model= predict(res, prep_data$pred_x[[i]])
#  conf= caret::confusionMatrix(pred_model, factor(prep_data$pred_y[[i]]))
#     loads = varImp(res)
#
#    res_model = ml(res_model = res,
#                   bacterial_loading = loads,
#                   res_prediction = pred_model,
#                   res_conf_matrix = conf,
#                   data= list(X= x,
#                              Y= y,
#                              train_y= prep_data$train_y[[i]],
#                              train_x= prep_data$train_x[[i]],
#                              pred_x= prep_data$pred_x[[i]],
#                              pred_y= prep_data$pred_y[[i]]))
},
mc.cores = cores)
rm(res)
rm(res_model)
rm(prep_data)
#' \item{train_y}{The variables used to train the model}
#' \item{train_x}{The values used to train the model}
#' \item{pred_x}{The predicted values}
#' \item{pred_y}{The predicted classification}
#' @export
#'
#' @examples
#' screen_models(enterotype, model="glmnet", prop=0.5, ncomp=20)
#'
#' screen_models(enterotype, model="plsda", cores=1, ncomp=10, number=10, repats=5, prop=0.6, train=T)
screen_models = function(obj, model="plsda", cores=1, ncomp=10, number=10,
repeats=3,  prop= 0.5, train= T, ... ){
if(class(obj)=="phyloseq"){
prep_data= prepare_physeq(obj, model="plsda", ncomp=10, prop= 0.5, train= T, ...)
} else if(class(obj)=="matrix" | class(obj)=="data.frame"){
prep_data = prepare_non_physeq(obj, model="plsda", ncomp=10, prop= 0.5, train= T, ...)
}
# pred_model= NULL
# conf= NULL
if(model == "plsda"){ # run plsda
res_model= mclapply(X = 1:length(prep_data$train_y),
FUN = function(i){
x = prep_data$train_x[[i]]
y = prep_data$train_y[[i]]
cat("Computing for",i, "\n")
res = caret::plsda(x =  prep_data$train_x[[i]],  y= as.factor(prep_data$train_y[[i]]), ncomp=ncomp)
# pred_model= predict(res, prep_data$pred_x[[i]])
#  conf= caret::confusionMatrix(pred_model, factor(prep_data$pred_y[[i]]))
#     loads = varImp(res)
#
#    res_model = ml(res_model = res,
#                   bacterial_loading = loads,
#                   res_prediction = pred_model,
#                   res_conf_matrix = conf,
#                   data= list(X= x,
#                              Y= y,
#                              train_y= prep_data$train_y[[i]],
#                              train_x= prep_data$train_x[[i]],
#                              pred_x= prep_data$pred_x[[i]],
#                              pred_y= prep_data$pred_y[[i]]))
},
mc.cores = cores)
} else if(model=="splsda"){
res_model= mclapply(X = 1:length(prep_data$train_y),
FUN = function(i){
x = train_x[[i]]
y = train_y[[i]]
cat("Computing for", names(prep_data[[i]]))
res= caret::splsda(x = prep_data$train_x[[i]],
y= as.factor(prep_data$train_y[[i]]),
ncomp=ncomp, ...)
# pred_model= predict(res, prep_data$pred_x[[i]])
# conf= caret::confusionMatrix(pred_model, factor(prep_data$pred_y[[i]]))
# loads = varImp(res)
#
# res_model = ml(res_model = res,
#                bacterial_loading = loads,
#                res_prediction = pred_model,
#                res_conf_matrix = conf,
#                data= list(X= x,
#                           Y= y,
#                           train_y= train_y[[i]],
#                           train_x= train_x[[i]],
#                           pred_x= pred_x[[i]],
#                           pred_y= pred_y[[i]]))
},
mc.cores = cores)
}  else {
control = trainControl(method="repeatedcv", number = number, repeats=repeats)
res_model = mclapply(X= 1:length(prep_data$train_y),
FUN = function(i){
cat("Computing for", names(prep_data$train_y[[i]]))
res= caret::train(x=train_x[[i]], y=train_y[[i]], method= model, metric="Accuracy")
# pred_model= predict(res, pred_x[[i]])
# conf= caret::confusionMatrix(pred_model, factor(pred_y[[i]]))
# loads = varImp(res)[["importance"]]
#
# res_model = ml(res_model = res,
#                bacterial_loading = loads,
#                res_prediction = pred_model,
#                res_conf_matrix = conf,
#                data= list(X= x,
#                           Y= y,
#                           train_y= train_y[[i]],
#                           train_x= train_x[[i]],
#                           pred_x= pred_x[[i]],
#                           pred_y= pred_y[[i]]))
},
mc.cores= cores)
}
names(res_model)= names(data$y)
return(res_model)
}
screen_models(tmp)
traceback()
#' \item{train_y}{The variables used to train the model}
#' \item{train_x}{The values used to train the model}
#' \item{pred_x}{The predicted values}
#' \item{pred_y}{The predicted classification}
#' @export
#'
#' @examples
#' screen_models(enterotype, model="glmnet", prop=0.5, ncomp=20)
#'
#' screen_models(enterotype, model="plsda", cores=1, ncomp=10, number=10, repats=5, prop=0.6, train=T)
screen_models = function(obj, model="plsda", cores=1, ncomp=10, number=10,
repeats=3,  prop= 0.5, train= T, ... ){
if(class(obj)=="phyloseq"){
prep_data= prepare_physeq(obj, model="plsda", ncomp=10, prop= 0.5, train= T, ...)
} else if(class(obj)=="matrix" | class(obj)=="data.frame"){
prep_data = prepare_non_physeq(obj, model="plsda", ncomp=10, prop= 0.5, train= T, ...)
}
# pred_model= NULL
# conf= NULL
if(model == "plsda"){ # run plsda
res_model= mclapply(X = 1:length(prep_data$train_y),
FUN = function(i){
x = prep_data$train_x[[i]]
y = prep_data$train_y[[i]]
cat("Computing for",i, "\n")
res = caret::plsda(x =  prep_data$train_x[[i]],  y= as.factor(prep_data$train_y[[i]]), ncomp=ncomp)
pred_model= predict(res, prep_data$pred_x[[i]])
conf= caret::confusionMatrix(pred_model, factor(prep_data$pred_y[[i]]))
loads = varImp(res)
res_model = ml(res_model = res,
bacterial_loading = loads,
res_prediction = pred_model,
res_conf_matrix = conf,
data= list(X= x,
Y= y,
train_y= prep_data$train_y[[i]],
train_x= prep_data$train_x[[i]],
pred_x= prep_data$pred_x[[i]],
pred_y= prep_data$pred_y[[i]]))
},
mc.cores = cores)
} else if(model=="splsda"){
res_model= mclapply(X = 1:length(prep_data$train_y),
FUN = function(i){
x = train_x[[i]]
y = train_y[[i]]
cat("Computing for", names(prep_data[[i]]))
res= caret::splsda(x = prep_data$train_x[[i]],
y= as.factor(prep_data$train_y[[i]]),
ncomp=ncomp, ...)
# pred_model= predict(res, prep_data$pred_x[[i]])
# conf= caret::confusionMatrix(pred_model, factor(prep_data$pred_y[[i]]))
# loads = varImp(res)
#
# res_model = ml(res_model = res,
#                bacterial_loading = loads,
#                res_prediction = pred_model,
#                res_conf_matrix = conf,
#                data= list(X= x,
#                           Y= y,
#                           train_y= train_y[[i]],
#                           train_x= train_x[[i]],
#                           pred_x= pred_x[[i]],
#                           pred_y= pred_y[[i]]))
},
mc.cores = cores)
}  else {
control = trainControl(method="repeatedcv", number = number, repeats=repeats)
res_model = mclapply(X= 1:length(prep_data$train_y),
FUN = function(i){
cat("Computing for", names(prep_data$train_y[[i]]))
res= caret::train(x=train_x[[i]], y=train_y[[i]], method= model, metric="Accuracy")
# pred_model= predict(res, pred_x[[i]])
# conf= caret::confusionMatrix(pred_model, factor(pred_y[[i]]))
# loads = varImp(res)[["importance"]]
#
# res_model = ml(res_model = res,
#                bacterial_loading = loads,
#                res_prediction = pred_model,
#                res_conf_matrix = conf,
#                data= list(X= x,
#                           Y= y,
#                           train_y= train_y[[i]],
#                           train_x= train_x[[i]],
#                           pred_x= pred_x[[i]],
#                           pred_y= pred_y[[i]]))
},
mc.cores= cores)
}
# names(res_model)= names(data$y)
return(res_model)
}
screen_models(tmp)
i=12
ncomp=10
x = prep_data$train_x[[i]]
y = prep_data$train_y[[i]]
prep_data= prepare_physeq(obj, model="plsda", ncomp=10, prop= 0.5, train= T, ...)
prep_data= prepare_physeq(obj, model="plsda", ncomp=10, prop= 0.5, train= T)
x = prep_data$train_x[[i]]
y = prep_data$train_y[[i]]
cat("Computing for",i, "\n")
res = caret::plsda(x =  prep_data$train_x[[i]],  y= as.factor(prep_data$train_y[[i]]), ncomp=ncomp)
res
pred_model= predict(res, prep_data$pred_x[[i]])
conf= caret::confusionMatrix(pred_model, factor(prep_data$pred_y[[i]]))
loads = varImp(res)
res_model = ml(res_model = res,
bacterial_loading = loads,
res_prediction = pred_model,
res_conf_matrix = conf,
data= list(X= x,
Y= y,
train_y= prep_data$train_y[[i]],
train_x= prep_data$train_x[[i]],
pred_x= prep_data$pred_x[[i]],
pred_y= prep_data$pred_y[[i]]))
conf
lapply(prep_data, dim)
lapply(prep_data, "[[",1)
prep_data$train_y
i=1
x = prep_data$train_x[[i]]
View(x)
y = prep_data$train_y[[i]]
dim(x)
dim(y)
length(y)
res = caret::plsda(x =  prep_data$train_x[[i]],  y= as.factor(prep_data$train_y[[i]]), ncomp=ncomp)
pred_model= predict(res, prep_data$pred_x[[i]])
conf= caret::confusionMatrix(pred_model, factor(prep_data$pred_y[[i]]))
dim(prep_data$pred_x[[i]])
dim(prep_data$pred_y[[i]])
length(prep_data$pred_y[[i]])
factor(prep_data$pred_y[[i]])
pred_model
droplevels(pred_model)
is.factor(pred_model)
?predict
x = as(otu_table(obj), "matrix")
x= x[, apply(otu_table(obj), 2, function(x)sum(x)>0)]
y= as(phyloseq::sample_data(obj), "data.frame")
data = pre_process(x, y)
train_y=NULL
train_x=NULL
pred_y = NULL
pred_x = NULL
# prepare training and testing data
if(train== T){
for(i in 1:length(data$y)){
index = caret::createDataPartition(data$y[[i]], list = F, p = 0.5)
train_y[[i]]= data$y[[i]][index]
train_x[[i]]= data$x[[i]][index,]
pred_y[[i]]= data$y[[i]][-index]
pred_x[[i]]= data$x[[i]][-index,]
}
}
train=T
# prepare training and testing data
if(train== T){
for(i in 1:length(data$y)){
index = caret::createDataPartition(data$y[[i]], list = F, p = 0.5)
train_y[[i]]= data$y[[i]][index]
train_x[[i]]= data$x[[i]][index,]
pred_y[[i]]= data$y[[i]][-index]
pred_x[[i]]= data$x[[i]][-index,]
}
}
#' @export
prepare_physeq = function(obj,  prop=0.5, train=T, ... ){
# extract phyloseq sub objects
if(taxa_are_rows(obj)){
obj = reverseASV(obj)
}
x = as(otu_table(obj), "matrix")
x= x[, apply(otu_table(obj), 2, function(x)sum(x)>0)]
y= as(phyloseq::sample_data(obj), "data.frame")
data = pre_process(x, y)
train_y=NULL
train_x=NULL
pred_y = NULL
pred_x = NULL
# prepare training and testing data
if(train== T){
for(i in 1:length(data$y)){
index = caret::createDataPartition(data$y[[i]], list = F, p = 0.5)
train_y[[i]]= data$y[[i]][index]
train_x[[i]]= data$x[[i]][index,]
pred_y[[i]]= data$y[[i]][-index]
pred_x[[i]]= data$x[[i]][-index,]
}
}
if(train==F){
for(i in 1:length(data$y)){
train_y[[i]]= data$y[[i]]
train_x[[i]]= data$x[[i]]
}
}
# return(list(train_y= train_y, train_x= train_x, pred_x =pred_x, pred_y= pred_y))
}
prepare_physeq(tmp)
rm(pred_x)
prepare_physeq(tmp)
i=2
res = caret::plsda(x =  prep_data$train_x[[i]],  y= as.factor(prep_data$train_y[[i]]), ncomp=ncomp)
res
pred_model= predict(res, prep_data$pred_x[[i]] )
pred_model
conf= caret::confusionMatrix(pred_model, factor(prep_data$pred_y[[i]]))
pred_model= predict(res, prep_data$pred_x[[i]] )
conf= caret::confusionMatrix(pred_model, factor(prep_data$pred_y[[i]]))
factor(prep_data$pred_y[[i]])
?predict
as.factor(prep_data$train_y[[i]])
res = caret::plsda(x =  prep_data$train_x[[i]],  y= prep_data$train_y[[i]], ncomp=ncomp)
prep_data$train_y[[i]]
factor(prep_data$train_y[[i]])
prep_data$train_y[[i]] %>% unique
prep_data$train_y[[i]] %>% droplevels()
factor(prep_data$train_y[[i]] )%>% droplevels()
prep_data$train_y[[i]] %>% table()
View(prep_data$train_y[[i]])
tmp = ps %>%
subset_samples(timepoint=="delivery" & sample_sort=="total" & cohort=="france")
tmp = ps %>%
subset_samples(timepoint=="delivery" & sample_sort=="total" & cohorte=="france")
colnames(sample_data(ps))
tmp = ps %>%
subset_samples(timepoint=="delivery" & sample_sort=="total" & country=="france")
screen_models(tmp)
prep_data= prepare_physeq(obj, model="plsda", ncomp=10, prop= 0.5, train= T, ...)
prep_data= prepare_physeq(obj, model="plsda", ncomp=10, prop= 0.5, train= T)
prep_data$train_y[[i]] %>% table()
prep_data$train_y[[i]]
i
obj
tmp = ps %>%
subset_samples(timepoint=="delivery" & sample_sort=="total" & country=="france")
tmp
obj=tmp
prep_data= prepare_physeq(obj, model="plsda", ncomp=10, prop= 0.5, train= T)
#' @export
prepare_physeq = function(obj,  prop=0.5, train=T, ... ){
# extract phyloseq sub objects
if(taxa_are_rows(obj)){
obj = reverseASV(obj)
}
x = as(otu_table(obj), "matrix")
x= x[, apply(otu_table(obj), 2, function(x)sum(x)>0)]
y= as(phyloseq::sample_data(obj), "data.frame")
data = pre_process(x, y)
train_y=NULL
train_x=NULL
pred_y = NULL
pred_x = NULL
# prepare training and testing data
if(train== T){
for(i in 1:length(data$y)){
index = caret::createDataPartition(data$y[[i]], list = F, p = 0.5)
train_y[[i]]= data$y[[i]][index]
train_x[[i]]= data$x[[i]][index,]
pred_y[[i]]= data$y[[i]][-index]
pred_x[[i]]= data$x[[i]][-index,]
}
}
if(train==F){
for(i in 1:length(data$y)){
train_y[[i]]= data$y[[i]]
train_x[[i]]= data$x[[i]]
}
}
return(list(train_y= train_y, train_x= train_x, pred_x =pred_x, pred_y= pred_y))
}
prep_data= prepare_physeq(obj, model="plsda", ncomp=10, prop= 0.5, train= T)
res_model= mclapply(X = 1:length(prep_data$train_y),
FUN = function(i){
cat("Computing for",i, "\n")
res = caret::plsda(x =  prep_data$train_x[[i]],  y= factor(prep_data$train_y[[i]]), ncomp=ncomp)
pred_model= predict(res, prep_data$pred_x[[i]] )
conf= caret::confusionMatrix(pred_model, factor(prep_data$pred_y[[i]]))
loads = varImp(res)
res_model = ml(res_model = res,
bacterial_loading = loads,
res_prediction = pred_model,
res_conf_matrix = conf,
data= list(
train_y= prep_data$train_y[[i]],
train_x= prep_data$train_x[[i]],
pred_x= prep_data$pred_x[[i]],
pred_y= prep_data$pred_y[[i]]))
},
mc.cores = cores)
i
res = caret::plsda(x =  prep_data$train_x[[i]],  y= factor(prep_data$train_y[[i]]), ncomp=ncomp)
pred_model= predict(res, prep_data$pred_x[[i]] )
pred_model
library(ImmuMicrobiome)
pred_model
res = caret::plsda(x =  prep_data$train_x[[i]],  y= factor(prep_data$train_y[[i]]), ncomp=ncomp)
pred_model= predict(res, prep_data$pred_x[[i]] )
pred_model
conf= caret::confusionMatrix(droplevels(pred_model), factor(prep_data$pred_y[[i]]))
droplevels(pred_model)
factor(prep_data$pred_y[[i]])
i=1
res = caret::plsda(x =  prep_data$train_x[[i]],  y= factor(prep_data$train_y[[i]]), ncomp=ncomp)
res
pred_model= predict(res, prep_data$pred_x[[i]] )
pred_model
conf= caret::confusionMatrix(droplevels(pred_model), factor(prep_data$pred_y[[i]]))
factor(prep_data$pred_y[[i]])
res = caret::plsda(x =  prep_data$train_x[[i]],  y= as.factor(prep_data$train_y[[i]]), ncomp=ncomp)
pred_model= predict(res, prep_data$pred_x[[i]] )
conf= caret::confusionMatrix(droplevels(pred_model), as.factor(prep_data$pred_y[[i]]))
as.factor(prep_data$train_y[[i]])
bool = sapply(y, unique)
new_y = NULL
new_x = NULL
for(col in 1:length(colnames(y))){ #check the variables before running plsda
# print(col)
if(length(bool[[col]])==1 | ((anyNA(y[,col]) | any(str_detect(y[,col], "NA"))) & length(bool[[col]])==2)){ # is the col as only one condition
print(paste(colnames(y)[col], ": vector of 1 condition"))
} else if(anyNA(y[,col]) & length(bool[[col]])>=2){ # remove NA
# print(paste(colnames(y)[col], "contains NA"))
new_x[[colnames(y)[col]]] = x[!is.na(y[,col]),]
new_y[[colnames(y)[col]]] = y[!is.na(y[,col]), col]
} else if(any(str_detect(y[,col], "NA")) & length(bool[[col]])>=2){ # remove "NA" values
new_x[[colnames(y)[col]]] = x[!str_detect(y[,col], "NA"),]
new_y[[colnames(y)[col]]] = y[!str_detect(y[,col], "NA"), col]
} else if(length(bool[[col]])==length(y[,col])){
print(paste(colnames(y)[col], ": is constituted of unique observations"))
} else if (length(bool[[col]])>=2 & !anyNA(y[,col])) {
# print(paste(colnames(y)[col],"is good to go"))
new_y[[colnames(y)[col]]] = y[,col] # make use only of the columns that a good for plsda
new_x[[colnames(y)[col]]] = x
}
}
names(new_y)
data = pre_process(x, y)
names(data)
names(data$y)
#' @export
prepare_physeq = function(obj,  prop=0.5, train=T, ... ){
# extract phyloseq sub objects
if(taxa_are_rows(obj)){
obj = reverseASV(obj)
}
x = as(otu_table(obj), "matrix")
x= x[, apply(otu_table(obj), 2, function(x)sum(x)>0)]
y= as(phyloseq::sample_data(obj), "data.frame")
data = pre_process(x, y)
train_y=NULL
train_x=NULL
pred_y = NULL
pred_x = NULL
# prepare training and testing data
if(train== T){
for(i in names(data$y)){
index = caret::createDataPartition(data$y[[i]], list = F, p = 0.5)
train_y[[i]]= data$y[[i]][index]
train_x[[i]]= data$x[[i]][index,]
pred_y[[i]]= data$y[[i]][-index]
pred_x[[i]]= data$x[[i]][-index,]
}
}
if(train==F){
for(i in names(data$y)){
train_y[[i]]= data$y[[i]]
train_x[[i]]= data$x[[i]]
}
}
return(list(train_y= train_y, train_x= train_x, pred_x =pred_x, pred_y= pred_y))
}
