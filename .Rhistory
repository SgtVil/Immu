model= "SeqTech+Gender+Nationality+Age+ClinicalStatus",
group="Enterotype", method = "dbRDA",
boxplot =T,
text=T,
color_vector = tol21rainbow, metadMDSdist=T)
?distance
constrained_beta_dispersion(enterotype,
model= "SeqTech+Gender+Nationality+Age+ClinicalStatus",
group="Enterotype", method = "dbRDA",
boxplot =T,
text=T,
color_vector = tol21rainbow)
formals(beta_dispersion)
typeof(beta_dispersion)
x <- 1
g04 <- function() {
y <- 2
i <- function() {
z <- 3
c(x, y, z)
}
i()
}
g04()
g11 <- function() {
if (!exists("a")) {
a <- 1
} else {
a <- a + 1
}
a
}
g11()
g11()
codetools::findGlobals(beta_dispersion)
devtools::build()
devtools::document()
warnings()
library(ImmuMicrobiome)
?plot_all_variance
tmp= read.csv("/home/remy/Documents/EXHES/Analysis/metabolite.csv")
usethis::use_data(tmp)
metabolomic= read.csv("/home/remy/Documents/EXHES/Analysis/metabolite.csv")
usethis::use_data(metabolomic)
beta_dispersion(physeq, method = "tsne", group="SeqTech", pca=F, title = "t-SNE", boxplot = F)
beta_dispersion(physeq, method = "PCoA", group="SeqTech", title = "PCoA", boxplot = F)
data(metabolomic)
metabolomic
View(metabolomic)
metabolomic= read.csv("/home/remy/Documents/EXHES/Analysis/metabolite.csv")
read.csv("/home/remy/Documents/EXHES/Analysis/metabolite.csv")
colnames(metabolomic)
metabolomic = load("/home/remy/Documents/EXHES/Analysis/metabolite.rds")
metabolomic = read_rds("/home/remy/Documents/EXHES/Analysis/metabolite.rds")
usethis::use_data(metabolomic)
usethis::use_data(metabolomic, overwrite = T)
data(metabolomic)
View(metabolomic)
plot_reduction(mat = metabolomic[,58:270])
plot_reduction(mat = metabolomic[,58:270], group = "birth_type")
plot_reduction(mat = metabolomic[,5:219], group = "birth_type")
plot_reduction(mat = metabolomic[,5:217], group = "birth_type")
View(metabolomic)
plot_reduction(mat = metabolomic[,5:217], group = metabolomic$birth_type )
plot_reduction(mat = metabolomic[,5:217], group = metabolomic$birth_type, boxplot = F )
plot_reduction(mat = metabolomic[,5:217], group = metabolomic$birth_type, method = "CA", boxplot = F )
plot_reduction(mat = metabolomic[,5:217], group = metabolomic$birth_type, method = "DCA", boxplot = F )
devtools::document()
library(ImmuMicrobiome)
data(metabolomic)
plot_reduction(mat = metabolomic[,5:217], group = metabolomic$birth_type, method = "DCA", boxplot = F )
plot_reduction(mat = metabolomic[,5:217], group = metabolomic$birth_type, method = "DCA", boxplot = T )
plot_reduction(mat = metabolomic[,5:217], group = metabolomic$birth_type, method = "DCA", boxplot = T, text = T )
plot_reduction(mat = metabolomic[,5:217], group = metabolomic$birth_type, method = "DCA", boxplot = T, text = T, permanova = T )
#' @param where Position for the permanova value. Default = "topleft"
#' @param inset Adjust the legend: inset distance(s) from the margins as a fraction of the plot region when legend is placed by keyword.
#' @param boxplot Logical. Plot the marginal boxplots or not. Default= T
#' @param pca Logical. For tsne only. Does the tsne need to be run on a PCA first ?
#' @param ...
#'
#' @return
#' @export
#'
#' @examples
plot_reduction = function(mat, axis_x=1, axis_y=2,  nf= 5, method= "PCA",
group=NULL, permanova=F,
color_vector= c("cyan4","brown","deepskyblue", "black","red"),
font=2, pch=20, draw= "lines",
ylimits="auto", xlimits= "auto", text=F, ncol=1,
x.intersp = 1, y.intersp=0.5, where="topleft",
inset=0.2, legend_title=NULL, boxplot= T, pca=T, ...){
old.par = par()
on.exit(layout(matrix(c(1,1))))
res= vegan::adonis2(as.formula(as.formula(paste0("mat ~" , group))),
data =  as(mat, 'matrix'),
permutations = 999, na.action = na.exclude )
if(is.null(group)){
stop("Need factor to segregate result.")
}
group= as.factor(group)
# if( method== "PCoA"){
#   p= dudi.pco(d, scannf = F, nf=nf)
#   p_li= p$li
#
# }
#
# if(method=="NMDS"){
#   # par(mfrow=c(1,1))
#   otu= as(otu_table(reverseASV(physeq)), 'matrix')
#   p= metaMDS(otu)
#   p_li= p$points
#   if(species==TRUE){
#     orditorp(p, display="species")
#   }
# }
if(method== "PCA"){
p= dudi.pca(as(mat, 'matrix'), scannf = F, nf=nf, scale = T, center = T)
p_li= p$li
}
if(method=="CA"){
p = cca( as(mat, 'matrix'))
p_li= p$CA$u
}
if(method=="DCA"){
p = decorana(  as(mat, 'matrix'))
p_li= scores(p)
}
# if(method=="tsne"){
#   p = Rtsne( as(mat, 'matrix'), pca=pca)
#   p_li= p$Y
# }
if(xlimits=="auto"){
xlimits = c(p_li[,axis_x] %>% max  /0.5, p_li[,1] %>% min  /0.8)
}
if(ylimits=="auto"){
ylimits = c(p_li[,axis_y] %>% max  /0.5, p_li[,2] %>% min  /0.8)
} else{
ylimits= ylim
xlimits= ylim
}
# shape= pch#set shapes
# shape= shape[as.factor(sample_data(physeq)[,group])]
col1= color_vector
col1= col1[unique(group)]
col2=  color_vector
col2= col2[group]
# #
if(boxplot==T){
# prepare the matrix
layout(matrix(c(2,2,2,4,
1,1,1,3,
1,1,1,3,
1,1,1,3),
nrow = 4,
ncol = 4,
byrow = TRUE))
par(mar=c(0,0,0,0))
#1
plot(p_li[,axis_x], p_li[,axis_y], bg= col2, axes=F, xlab="", ylab="", las=2, pch=21, cex=cex, ylim=ylimits, xlim=xlimits, ...)
disp= ordispider(p_li, groups = group, col = adjustcolor(color_vector, alpha=0.3), lwd=lwd,  ylim=ylimits, xlim=xlimits)
ordiellipse(p_li, groups= group, conf= conf, col = color_vector, lwd = lwd, draw= draw,  ylim=ylimits, xlim=xlimits)
points(p_li[,axis_x], p_li[,axis_y], bg= col2, xlab="", ylab="", las=2, pch=21, cex=cex, ylim=ylimits, xlim=xlimits, ...)
if(text){
text(x= unique(disp[,1:2]),  labels=unique(group), col="black", cex=cex, font=font)
}
if(permanova == T){
legend(where, inset = 0.2, legend=paste("PERMANOVA\n", "p=", res$`Pr(>F)`[1]), bty="n", cex=cex)
}
#2
boxplot(p_li[,axis_x]~group, data=p_li, horizontal=T, axes=F,  xlab=NULL, ylab=NULL,
col= color_vector , xaxt="n", lwd=lwd/2,  ylim=xlimits)
stripchart(p_li[,axis_x]~group, data=p_li, method = "jitter", vertical=F, add=T, pch=21,
col= "black", bg="gray", lwd=lwd/2,  ylim=xlimits)
#3
boxplot(p_li[,axis_y]~group, data=p_li, axes=F,  ylab="", xlab="", col= color_vector, lwd=lwd/2,  ylim=ylimits)
stripchart(p_li[,axis_y]~group, data=p_li, method = "jitter", vertical=T, add=T, pch=21,
col= "black", bg="gray", lwd=lwd/2,  ylim=ylimits)
# #4
plot(NULL, xlim=c(0,1), ylim=c(0,1), ylab="", xlab="", axes=F)
legend("center", legend=unique(group), col = col1, title= legend_title, pch= 20,
cex= cex, bty="n", ncol= ncol, y.intersp = y.intersp)
return(head(p$eig/sum(p$eig)*100,5))
}
if(boxplot==F){
layout(matrix(c(1,1)))
par(mar=c(0.5,0.5,1,0.5))
#1
plot(p_li[,axis_x], p_li[,axis_y], bg= col2, axes=F, xlab="", ylab="", las=2, pch=21, cex=cex, ylim=ylimits, xlim=xlimits, ...)
disp= ordispider(p_li, groups = group, col = adjustcolor(color_vector, alpha=0.3), lwd=lwd,  ylim=ylimits, xlim=xlimits,)
ordiellipse(p_li, groups= group, conf= conf, col = color_vector, lwd = lwd, draw= draw,  ylim=ylimits, xlim=xlimits)
points(p_li[,axis_x], p_li[,axis_y], bg= col2,  xlab="", ylab="", las=2, pch=21, cex=cex, ylim=ylimits, xlim=xlimits, ...)
text(x= unique(disp[,1:2]),  labels=unique(group), col="black", cex=cex, font=font)
if(!is.null(title)){
title(title)
}
if(permanova == T){
# legend("topright", inset = 0.2, legend=paste("PERMANOVA:", "p-value", res$`Pr(>F)`[1]), bty="n")
legend(where, inset = 0.2, legend=paste("PERMANOVA\n", "p=", res$`Pr(>F)`[1]), bty="n", cex=cex)
}
return( head(p$eig/sum(p$eig)*100, 5))
}
}
plot_reduction(mat = metabolomic[,5:217], group = metabolomic$birth_type, method = "DCA", boxplot = T, text = T, permanova = T )
?adonis
as.formula(as.formula(paste0("mat ~" , group))
)
group='birth_type'
as.formula(as.formula(paste0("mat ~" , group)))
mat = metabolomic[,5:217]
as.formula(as.formula(paste0("mat ~" , group)))
:adonis2(as.formula(as.formula(paste0("mat ~" , group))),
vegan::adonis2(as.formula(as.formula(paste0("mat ~" , group))),
data =  as(mat, 'matrix'),
permutations = 999, na.action = na.exclude )
vegan::adonis2(as.formula(as.formula(paste0("mat ~" , group))),
data =  as(mat, 'data.frame'),
permutations = 999, na.action = na.exclude )
devtools::document()
library(ImmuMicrobiome)
plot_reduction(mat = metabolomic[,5:217], group = metabolomic$birth_type, method = "DCA", boxplot = T, text = T, permanova = T )
rm(plot_reduction())
rm(plot_reduction)
rm(constrained_beta_dispersion)
library(ImmuMicrobiome)
plot_reduction(mat = metabolomic[,5:217], cat_data = metabolomic[,1:4],group = metabolomic$birth_type, method = "DCA", boxplot = T, text = T, permanova = T )
plot_reduction(mat = metabolomic[,5:217], cat_data = metabolomic[,1:4], group = "birth_type", method = "DCA", boxplot = T, text = T, permanova = T )
#' @param where Position for the permanova value. Default = "topleft"
#' @param inset Adjust the legend: inset distance(s) from the margins as a fraction of the plot region when legend is placed by keyword.
#' @param boxplot Logical. Plot the marginal boxplots or not. Default= T
#' @param pca Logical. For tsne only. Does the tsne need to be run on a PCA first ?
#' @param ...
#'
#' @return
#' @export
#'
#' @examples
plot_reduction = function(mat, cat_data, axis_x=1, axis_y=2,  nf= 5, method= "PCA",
group=NULL, permanova=F,
color_vector= c("cyan4","brown","deepskyblue", "black","red"),
font=2, pch=20, draw= "lines",
ylimits="auto", xlimits= "auto", text=F, ncol=1,
x.intersp = 1, y.intersp=0.5, where="topleft",
inset=0.2, legend_title=NULL, boxplot= T, pca=T, ...){
old.par = par()
on.exit(layout(matrix(c(1,1))))
res= vegan::adonis2(as.formula(as.formula(paste0("mat ~" , group))),
data =  as(cat_data, 'data.frame'),
permutations = 999, na.action = na.exclude )
if(is.null(group)){
stop("Need factor to segregate result.")
}
group= as.factor(cat_data[,group])
# if( method== "PCoA"){
#   p= dudi.pco(d, scannf = F, nf=nf)
#   p_li= p$li
#
# }
#
# if(method=="NMDS"){
#   # par(mfrow=c(1,1))
#   otu= as(otu_table(reverseASV(physeq)), 'matrix')
#   p= metaMDS(otu)
#   p_li= p$points
#   if(species==TRUE){
#     orditorp(p, display="species")
#   }
# }
if(method== "PCA"){
p= dudi.pca(as(mat, 'matrix'), scannf = F, nf=nf, scale = T, center = T)
p_li= p$li
}
if(method=="CA"){
p = cca( as(mat, 'matrix'))
p_li= p$CA$u
}
if(method=="DCA"){
p = decorana(  as(mat, 'matrix'))
p_li= scores(p)
}
# if(method=="tsne"){
#   p = Rtsne( as(mat, 'matrix'), pca=pca)
#   p_li= p$Y
# }
if(xlimits=="auto"){
xlimits = c(p_li[,axis_x] %>% max  /0.5, p_li[,1] %>% min  /0.8)
}
if(ylimits=="auto"){
ylimits = c(p_li[,axis_y] %>% max  /0.5, p_li[,2] %>% min  /0.8)
} else{
ylimits= ylim
xlimits= ylim
}
# shape= pch#set shapes
# shape= shape[as.factor(sample_data(physeq)[,group])]
col1= color_vector
col1= col1[unique(group)]
col2=  color_vector
col2= col2[group]
# #
if(boxplot==T){
# prepare the matrix
layout(matrix(c(2,2,2,4,
1,1,1,3,
1,1,1,3,
1,1,1,3),
nrow = 4,
ncol = 4,
byrow = TRUE))
par(mar=c(0,0,0,0))
#1
plot(p_li[,axis_x], p_li[,axis_y], bg= col2, axes=F, xlab="", ylab="", las=2, pch=21, cex=cex, ylim=ylimits, xlim=xlimits, ...)
disp= ordispider(p_li, groups = group, col = adjustcolor(color_vector, alpha=0.3), lwd=lwd,  ylim=ylimits, xlim=xlimits)
ordiellipse(p_li, groups= group, conf= conf, col = color_vector, lwd = lwd, draw= draw,  ylim=ylimits, xlim=xlimits)
points(p_li[,axis_x], p_li[,axis_y], bg= col2, xlab="", ylab="", las=2, pch=21, cex=cex, ylim=ylimits, xlim=xlimits, ...)
if(text){
text(x= unique(disp[,1:2]),  labels=unique(group), col="black", cex=cex, font=font)
}
if(permanova == T){
legend(where, inset = 0.2, legend=paste("PERMANOVA\n", "p=", res$`Pr(>F)`[1]), bty="n", cex=cex)
}
#2
boxplot(p_li[,axis_x]~group, data=p_li, horizontal=T, axes=F,  xlab=NULL, ylab=NULL,
col= color_vector , xaxt="n", lwd=lwd/2,  ylim=xlimits)
stripchart(p_li[,axis_x]~group, data=p_li, method = "jitter", vertical=F, add=T, pch=21,
col= "black", bg="gray", lwd=lwd/2,  ylim=xlimits)
#3
boxplot(p_li[,axis_y]~group, data=p_li, axes=F,  ylab="", xlab="", col= color_vector, lwd=lwd/2,  ylim=ylimits)
stripchart(p_li[,axis_y]~group, data=p_li, method = "jitter", vertical=T, add=T, pch=21,
col= "black", bg="gray", lwd=lwd/2,  ylim=ylimits)
# #4
plot(NULL, xlim=c(0,1), ylim=c(0,1), ylab="", xlab="", axes=F)
legend("center", legend=unique(group), col = col1, title= legend_title, pch= 20,
cex= cex, bty="n", ncol= ncol, y.intersp = y.intersp)
return(head(p$eig/sum(p$eig)*100,5))
}
if(boxplot==F){
layout(matrix(c(1,1)))
par(mar=c(0.5,0.5,1,0.5))
#1
plot(p_li[,axis_x], p_li[,axis_y], bg= col2, axes=F, xlab="", ylab="", las=2, pch=21, cex=cex, ylim=ylimits, xlim=xlimits, ...)
disp= ordispider(p_li, groups = group, col = adjustcolor(color_vector, alpha=0.3), lwd=lwd,  ylim=ylimits, xlim=xlimits,)
ordiellipse(p_li, groups= group, conf= conf, col = color_vector, lwd = lwd, draw= draw,  ylim=ylimits, xlim=xlimits)
points(p_li[,axis_x], p_li[,axis_y], bg= col2,  xlab="", ylab="", las=2, pch=21, cex=cex, ylim=ylimits, xlim=xlimits, ...)
text(x= unique(disp[,1:2]),  labels=unique(group), col="black", cex=cex, font=font)
if(!is.null(title)){
title(title)
}
if(permanova == T){
# legend("topright", inset = 0.2, legend=paste("PERMANOVA:", "p-value", res$`Pr(>F)`[1]), bty="n")
legend(where, inset = 0.2, legend=paste("PERMANOVA\n", "p=", res$`Pr(>F)`[1]), bty="n", cex=cex)
}
return( head(p$eig/sum(p$eig)*100, 5))
}
}
plot_reduction(mat = metabolomic[,5:217], cat_data = metabolomic[,1:4], group = "birth_type", method = "DCA", boxplot = T, text = T, permanova = T )
plot_constrained_reduction(mat = metabolomic[,5:217],  cat_data = metabolomic[,1:4], group = "birth_type",)
plot_constrained_reduction(mat = metabolomic[,5:217], cat_data = metabolomic[,1:4], model="brith_type+breastfeeding+obesity", group = "birth_type")
plot_constrained_reduction(mat = metabolomic[,5:217], cat_data = metabolomic[,1:4], model="birth_type+breastfeeding+obesity", group = "birth_type")
metabolomic[,1:4]
plot_constrained_reduction(mat = metabolomic[,5:217], cat_data = metabolomic[,1:4], model="birth_type+breastfeeding+sex", group = "birth_type")
#' @param inset Permanova legend adjustment see \link{legend}
#' @param boxplot Draw boxplot for each axis. Default = T
#' @param ...
#'
#' @return
#'
#' @import vegan
#' @export
#'
#' @examples
plot_constrained_reduction= function(mat, cat_data, axis_x=1, axis_y=2, model, nf= 5, method= "CCA",
group=NULL, permanova=F, color_vector= c("cyan4","brown","deepskyblue", "black","red"),
legend_title= NULL, lwd=1, conf=0.9, cex=2,
font=2, pch=20, draw= "lines",
ylimits="auto", xlimits= "auto", text=F, ncol=1,
x.intersp = 1, y.intersp=0.5, where="topleft", inset=0.2, boxplot= T,...){
# asv= as(otu_table(reverseASV(physeq)), 'matrix')
old.par = par()
on.exit(layout(matrix(c(1,1))))
mod = as.formula(paste("as(mat, 'matrix')", "~", model))
# df= as(sample_data(physeq), "data.frame")
group= as.factor(cat_data[,group])
if(method=="CCA"){
p= cca(mod, data=cat_data, na.action=na.exclude)
p_li= scores(p, display = "sites", choices=c(axis_x, axis_y) )
}
if(method=="RDA"){
p= rda(mod, data=cat_data, na.action=na.exclude)
p_li= scores(p, display = "sites", choices=c(axis_x, axis_y) )
}
# if(method=="dbRDA"){
#   p = capscale(mod, data=df, na.action=na.exclude, dist=dist)
#   p_li= scores(p, display = "sites", choices=c(axis_x, axis_y) )
# }
if(xlimits=="auto"){
xlimits = c(p_li[!is.na(p_li[,axis_x]),axis_x] %>% max  /0.5, p_li[!is.na(p_li[,axis_x]),axis_x] %>% min  /0.8)
}
if(ylimits=="auto"){
ylimits = c(p_li[!is.na(p_li[,axis_y]),axis_y]  %>% max  /0.5, p_li[!is.na(p_li[,axis_y]),axis_y]  %>% min  /0.8)
} else{
ylimits= ylim
xlimits= ylim
}
# shape= pch#set shapes
# shape= shape[as.factor(sample_data(physeq)[,group])]
col1= color_vector
col1= col1[unique(group)]
col2=  color_vector
col2= col2[group]
# #
if(boxplot==T){
# prepare the matrix
layout(matrix(c(2,2,2,4,
1,1,1,3,
1,1,1,3,
1,1,1,3),
nrow = 4,
ncol = 4,
byrow = TRUE))
par(mar=c(0,0,0,0))
#1
plot(p_li[,axis_x], p_li[,axis_y], bg= col2, axes=F, xlab="", ylab="", las=2, pch=21, cex=cex, ylim=ylimits, xlim=xlimits, ...)
disp= ordispider(p, groups = group, col = adjustcolor(color_vector, alpha=0.3), lwd=lwd,  ylim=ylimits, xlim=xlimits)
ordiellipse(p, groups= group, conf= conf, col = color_vector, lwd = lwd, draw= draw,  ylim=ylimits, xlim=xlimits)
points(p_li[,axis_x], p_li[,axis_y], bg= col2, xlab="", ylab="", las=2, pch=21, cex=cex, ylim=ylimits, xlim=xlimits, ...)
text(p, dis="bp")
if(text){
text(x= unique(disp[,1:2]),  labels=unique(group), col="black", cex=cex, font=font)
}
# if(permanova == T){
#
#
#   legend(where, inset = 0.2, legend=paste("PERMANOVA\n", "p=", res$`Pr(>F)`[1]), bty="n", cex=cex)
# }
#2
boxplot(p_li[,axis_x]~group, data=p_li, horizontal=T, axes=F,  xlab=NULL, ylab=NULL,
col= color_vector , xaxt="n", lwd=lwd/2,  ylim=xlimits)
stripchart(p_li[,axis_x]~group, data=p_li, method = "jitter", vertical=F, add=T, pch=21,
col= "black", bg="gray", lwd=lwd/2,  ylim=xlimits)
#3
boxplot(p_li[,axis_y]~group, data=p_li, axes=F,  ylab="", xlab="", col= color_vector, lwd=lwd/2,  ylim=ylimits)
stripchart(p_li[,axis_y]~group, data=p_li, method = "jitter", vertical=T, add=T, pch=21,
col= "black", bg="gray", lwd=lwd/2,  ylim=ylimits)
# #4
plot(NULL, xlim=c(0,1), ylim=c(0,1), ylab="", xlab="", axes=F)
legend("center", legend=unique(group), col = col1, title= legend_title, pch= 20,
cex= cex, bty="n", ncol= ncol, y.intersp = y.intersp)
return(p)
}
if(boxplot==F){
layout(matrix(c(1,1)))
par(mar=c(0,0,0,0))
#1
plot(p_li[,axis_x], p_li[,axis_y], bg= col2, axes=F, xlab="", ylab="", las=2, pch=21, cex=cex, ylim=ylimits, xlim=xlimits, ...)
disp= ordispider(p, groups = group, col = adjustcolor(color_vector, alpha=0.3), lwd=lwd,  ylim=ylimits, xlim=xlimits,)
ordiellipse(p, groups= group, conf= conf, col = color_vector, lwd = lwd, draw= draw,  ylim=ylimits, xlim=xlimits)
points(p_li[,axis_x], p_li[,axis_y], bg= col2,  xlab="", ylab="", las=2, pch=21, cex=cex, ylim=ylimits, xlim=xlimits, ...)
text(p, dis="bp")
if(text){
text(x= unique(disp[,1:2]),  labels=unique(group), col="black", cex=cex, font=font)
}
# if(permanova == T){
#   # legend("topright", inset = 0.2, legend=paste("PERMANOVA:", "p-value", res$`Pr(>F)`[1]), bty="n")
#
#   legend(where, inset = 0.2, legend=paste("PERMANOVA\n", "p=", res$`Pr(>F)`[1]), bty="n", cex=cex)
# }
legend("center", legend=unique(group), col = col1, title= legend_title, pch= 20,
cex= cex, bty="n", ncol= ncol, y.intersp = y.intersp)
return(p)
}
}
plot_constrained_reduction(mat = metabolomic[,5:217], cat_data = metabolomic[,1:4], model="birth_type+breastfeeding+sex", group = "birth_type")
immummi
devtools::document()
library(ImmuMicrobiome)
variance = calculate_variance(meta = metabolomic[,1:4], feat = metabolomic[,5:217], cores = 10)
devtools::document()
library(ImmuMicrobiome)
variance = calculate_variance(meta = metabolomic[,1:4], feat = metabolomic[,5:217], cores = 10)
traceback()
devtools::document()
library(ImmuMicrobiome)
variance = calculate_variance(meta = metabolomic[,1:4], feat = metabolomic[,5:217], cores = 10)
variance
head(variance$variance)
variance = calculate_variance(meta = metabolomic[,2:4], feat = metabolomic[,5:217], cores = 10)
head(variance$variance)
plot_reduction(mat = metabolomic[,5:217], cat_data = metabolomic[,1:4], group = "birth_type", method = "DCA", boxplot = T, text = T, permanova = T)
plot_constrained_reduction(mat = metabolomic[,5:217], cat_data = metabolomic[,1:4], model="birth_type+breastfeeding+sex", group = "birth_type")
plot_reduction
devtools::document()
library(ImmuMicrobiome)
rm(plot_reduction)
rm(plot_constrained_reduction)
library(ImmuMicrobiome)
devtools::document()
devtools::document()
warnings()
devtools::document()
library(ImmuMicrobiome)
devtools::document()
devtools::document()
library(ImmuMicrobiome)
devtools::document()
library(ImmuMicrobiome)
devtools::document()
devtools::document()
devtools::document()
library(ImmuMicrobiome)
devtools::document()
devtools::document()
library(ImmuMicrobiome)
