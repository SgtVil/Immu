try= fold_change(mat = metabolomic, clinical_data = 1:4, cores = 1)
try
class(try)
#' This function will return a list of data.frames. Each factor present in your `clinical_data` will be processed
#' and give an independent data.frame. Each dataframe contains:
#' - p = p value calculated by either Kruskal test or Wilcoxon test
#' - p.adj = p value corrected with FDR
#' - fold = fold change calculated as : log2(group1/group2)
#' @export
#'
#' @examples
#' fold= fold= fold_change(metabolomic[,1:4], features = metabolomic[,5:217], cores = 5)
#' head(fold$birth_type, 5)
fold_change = function(mat, clinical_data, cores = 2, ...){
features = mat[,-clinical_data]
clinical_data = mat[,clinical_data]
rownames(clinical_data)= paste("sample", 1:length(clinical_data[,1]))
rownames(features)= paste("sample", 1:length(features[,1]))
df = features %>%
as.data.frame %>%
rownames_to_column()%>%
inner_join(clinical_data %>%
rownames_to_column(), by='rowname')%>%
pivot_longer(cols = 2:(dim(features)[2]+1), names_to = "features", values_to = "value")%>%
as.data.frame
p.value = parallel::mclapply(colnames(clinical_data), function(i){
if(length(unique(clinical_data[,i]))>2){
tmp= df  %>%
drop_na(i)%>%
group_by(features) %>%
select_at(vars(features, value, i))%>%
rstatix::kruskal_test(formula= as.formula(paste("value~", i)), ...) %>%
rstatix::adjust_pvalue(method = "fdr")%>%
dplyr::select(features,  p, p.adj)%>%
mutate(factor= i)%>%
labelled::remove_attributes('all')
# attributes(tmp)= NULL
} else {
tmp= df  %>%
drop_na(i)%>%
group_by(features) %>%
select_at(vars(features, value, i))%>%
rstatix::wilcox_test(formula= as.formula(paste("value~", i)), ...) %>%
rstatix::adjust_pvalue(method = "fdr")%>%
dplyr::select(features, p, p.adj)%>%
mutate(factor= i)%>%
labelled::remove_attributes( 'all')
# attributes(tmp)= NULL
}
return(tmp)
}, mc.cores= cores)
names(p.value)= colnames(clinical_data)
fold.change= parallel::mclapply(colnames(clinical_data), function(i){
if(length(unique(df[,i]))==2){
comp=  df %>%
drop_na(i)%>%
# pull(!!sym(i))%>%
distinct(!!sym(i)) %>%
pull %>% sort
tmp= df %>%
drop_na(i)%>%
group_by(features, !!sym(i)) %>%
dplyr::select(features, !!sym(i), value)%>%
summarise(mean_val=mean(value))%>%
summarise(fold= log2(mean_val[2]/mean_val[1]))%>%
ungroup%>%
dplyr::select(fold) %>%
mutate(comp = paste0(i, " : ","log2(", comp[2], "/", comp[1], ')'))
} else if(length(unique(df[,i]))>2){
comp=  df %>%
drop_na(i)%>%
# pull(!!sym(i))%>%
distinct(!!sym(i)) %>%
pull %>% sort
tmp= df %>%
drop_na(i)%>%
group_by(features, !!sym(i)) %>%
dplyr::select(features, !!sym(i), value)%>%
summarise(mean_val=mean(value))%>%
summarise(fold.1= log2(mean_val[2]/mean_val[1]),
fold.2= log2(mean_val[3]/mean_val[1]),
fold.3= log2(mean_val[3]/mean_val[2]))%>%
ungroup%>%
magrittr::set_colnames(value = c("features",  paste0(i, " : ","log2(", comp[2], "/", comp[1], ')'),
paste0(i, " : ","log2(", comp[3], "/", comp[1], ')'),
paste0(i, " : ","log2(", comp[3], "/", comp[2], ')')))%>%
pivot_longer(!features, names_to = "comp", values_to = "fold" )
}
})
names(fold.change)= colnames(clinical_data)
tmp = Map(cbind, p.value, fold.change)
.fold <-setClass("FoldChangeClass", package = "ImmuMicrobiome")
.fold = tmp
return(.fold)
}
try= fold_change(mat = metabolomic, clinical_data = 1:4, cores = 1)
class(try)
.fold
#' @slot ig_seq_all data.frame.
#' @slot ig_up data.frame.
#' @slot ig_down data.frame.
#' @slot ellipse_data data.frame.
#' @slot taxa data.frame.
#'
#' @return A class IgASeq
#' @export
#'
#' @examples .
fold <- setClass("FoldChangeClass", package = "ImmuMicrobiome")
#' Create a S4 object for the IgASeq data
#'
#'
#' @return A class FoldChangeClass
#' @export
#'
#' @examples
fold <- setClass("FoldChangeClass", package = "ImmuMicrobiome")
fold = try
fold
class(fold)
tmp = fold(tmp)
fold
rm(fold)
#' Create a S4 object for the IgASeq data
#'
#'
#' @return A class FoldChangeClass
#' @export
#'
#' @examples
fold <- setClass("FoldChangeClass", package = "ImmuMicrobiome")
tmp = fold(tmp)
variance$mean.feat
variance$all
View(fold)
View(try$breastfeeding)
#' This function will return a list of data.frames. Each factor present in your `clinical_data` will be processed
#' and give an independent data.frame. Each dataframe contains:
#' - p = p value calculated by either Kruskal test or Wilcoxon test
#' - p.adj = p value corrected with FDR
#' - fold = fold change calculated as : log2(group1/group2)
#' @export
#'
#' @examples
#' fold= fold= fold_change(metabolomic[,1:4], features = metabolomic[,5:217], cores = 5)
#' head(fold$birth_type, 5)
fold_change = function(mat, clinical_data, cores = 2, ...){
features = mat[,-clinical_data]
clinical_data = mat[,clinical_data]
rownames(clinical_data)= paste("sample", 1:length(clinical_data[,1]))
rownames(features)= paste("sample", 1:length(features[,1]))
df = features %>%
as.data.frame %>%
rownames_to_column()%>%
inner_join(clinical_data %>%
rownames_to_column(), by='rowname')%>%
pivot_longer(cols = 2:(dim(features)[2]+1), names_to = "features", values_to = "value")%>%
as.data.frame
mean.feat = apply(features, 2, mean) %>%
as.data.frame %>%
rownames_to_column()%>%
magrittr::set_colnames(c("features", "mean.feat"))
p.value = parallel::mclapply(colnames(clinical_data), function(i){
if(length(unique(clinical_data[,i]))>2){
tmp= df  %>%
drop_na(i)%>%
group_by(features) %>%
select_at(vars(features, value, i))%>%
rstatix::kruskal_test(formula= as.formula(paste("value~", i)), ...) %>%
rstatix::adjust_pvalue(method = "fdr")%>%
dplyr::select(features,  p, p.adj)%>%
mutate(factor= i)%>%
labelled::remove_attributes('all')
# attributes(tmp)= NULL
} else {
tmp= df  %>%
drop_na(i)%>%
group_by(features) %>%
select_at(vars(features, value, i))%>%
rstatix::wilcox_test(formula= as.formula(paste("value~", i)), ...) %>%
rstatix::adjust_pvalue(method = "fdr")%>%
dplyr::select(features, p, p.adj)%>%
mutate(factor= i)%>%
labelled::remove_attributes( 'all')
# attributes(tmp)= NULL
}
return(tmp)
}, mc.cores= cores)
names(p.value)= colnames(clinical_data)
fold.change= parallel::mclapply(colnames(clinical_data), function(i){
if(length(unique(df[,i]))==2){
comp=  df %>%
drop_na(i)%>%
# pull(!!sym(i))%>%
distinct(!!sym(i)) %>%
pull %>% sort
tmp= df %>%
drop_na(i)%>%
group_by(features, !!sym(i)) %>%
dplyr::select(features, !!sym(i), value)%>%
summarise(mean_val=mean(value))%>%
summarise(fold= log2(mean_val[2]/mean_val[1]))%>%
ungroup%>%
dplyr::select(fold) %>%
mutate(comp = paste0(i, " : ","log2(", comp[2], "/", comp[1], ')'))
} else if(length(unique(df[,i]))>2){
comp=  df %>%
drop_na(i)%>%
# pull(!!sym(i))%>%
distinct(!!sym(i)) %>%
pull %>% sort
tmp= df %>%
drop_na(i)%>%
group_by(features, !!sym(i)) %>%
dplyr::select(features, !!sym(i), value)%>%
summarise(mean_val=mean(value))%>%
summarise(fold.1= log2(mean_val[2]/mean_val[1]),
fold.2= log2(mean_val[3]/mean_val[1]),
fold.3= log2(mean_val[3]/mean_val[2]))%>%
ungroup%>%
magrittr::set_colnames(value = c("features",  paste0(i, " : ","log2(", comp[2], "/", comp[1], ')'),
paste0(i, " : ","log2(", comp[3], "/", comp[1], ')'),
paste0(i, " : ","log2(", comp[3], "/", comp[2], ')')))%>%
pivot_longer(!features, names_to = "comp", values_to = "fold" )
}
})
names(fold.change)= colnames(clinical_data)
tmp = Map(cbind, p.value, fold.change, mean.feat)
return(tmp)
}
try= fold_change(mat = metabolomic, clinical_data = 1:4, cores = 1)
try$breastfeeding%>% VIew
try$breastfeeding%>% View
#' This function will return a list of data.frames. Each factor present in your `clinical_data` will be processed
#' and give an independent data.frame. Each dataframe contains:
#' - p = p value calculated by either Kruskal test or Wilcoxon test
#' - p.adj = p value corrected with FDR
#' - fold = fold change calculated as : log2(group1/group2)
#' @export
#'
#' @examples
#' fold= fold= fold_change(metabolomic[,1:4], features = metabolomic[,5:217], cores = 5)
#' head(fold$birth_type, 5)
fold_change = function(mat, clinical_data, cores = 2, ...){
features = mat[,-clinical_data]
clinical_data = mat[,clinical_data]
rownames(clinical_data)= paste("sample", 1:length(clinical_data[,1]))
rownames(features)= paste("sample", 1:length(features[,1]))
df = features %>%
as.data.frame %>%
rownames_to_column()%>%
inner_join(clinical_data %>%
rownames_to_column(), by='rowname')%>%
pivot_longer(cols = 2:(dim(features)[2]+1), names_to = "features", values_to = "value")%>%
as.data.frame
mean.feat = apply(features, 2, mean) %>%
as.data.frame %>%
rownames_to_column()%>%
magrittr::set_colnames(c("features", "mean.feat"))%>%
dplyr::select(mean.feat)
p.value = parallel::mclapply(colnames(clinical_data), function(i){
if(length(unique(clinical_data[,i]))>2){
tmp= df  %>%
drop_na(i)%>%
group_by(features) %>%
select_at(vars(features, value, i))%>%
rstatix::kruskal_test(formula= as.formula(paste("value~", i)), ...) %>%
rstatix::adjust_pvalue(method = "fdr")%>%
dplyr::select(features,  p, p.adj)%>%
mutate(factor= i)%>%
labelled::remove_attributes('all')
# attributes(tmp)= NULL
} else {
tmp= df  %>%
drop_na(i)%>%
group_by(features) %>%
select_at(vars(features, value, i))%>%
rstatix::wilcox_test(formula= as.formula(paste("value~", i)), ...) %>%
rstatix::adjust_pvalue(method = "fdr")%>%
dplyr::select(features, p, p.adj)%>%
mutate(factor= i)%>%
labelled::remove_attributes( 'all')
# attributes(tmp)= NULL
}
return(tmp)
}, mc.cores= cores)
names(p.value)= colnames(clinical_data)
fold.change= parallel::mclapply(colnames(clinical_data), function(i){
if(length(unique(df[,i]))==2){
comp=  df %>%
drop_na(i)%>%
# pull(!!sym(i))%>%
distinct(!!sym(i)) %>%
pull %>% sort
tmp= df %>%
drop_na(i)%>%
group_by(features, !!sym(i)) %>%
dplyr::select(features, !!sym(i), value)%>%
summarise(mean_val=mean(value))%>%
summarise(fold= log2(mean_val[2]/mean_val[1]))%>%
ungroup%>%
dplyr::select(fold) %>%
mutate(comp = paste0(i, " : ","log2(", comp[2], "/", comp[1], ')'))
} else if(length(unique(df[,i]))>2){
comp=  df %>%
drop_na(i)%>%
# pull(!!sym(i))%>%
distinct(!!sym(i)) %>%
pull %>% sort
tmp= df %>%
drop_na(i)%>%
group_by(features, !!sym(i)) %>%
dplyr::select(features, !!sym(i), value)%>%
summarise(mean_val=mean(value))%>%
summarise(fold.1= log2(mean_val[2]/mean_val[1]),
fold.2= log2(mean_val[3]/mean_val[1]),
fold.3= log2(mean_val[3]/mean_val[2]))%>%
ungroup%>%
magrittr::set_colnames(value = c("features",  paste0(i, " : ","log2(", comp[2], "/", comp[1], ')'),
paste0(i, " : ","log2(", comp[3], "/", comp[1], ')'),
paste0(i, " : ","log2(", comp[3], "/", comp[2], ')')))%>%
pivot_longer(!features, names_to = "comp", values_to = "fold" )
}
})
names(fold.change)= colnames(clinical_data)
tmp = Map(cbind, p.value, fold.change, mean.feat)
return(tmp)
}
try= fold_change(mat = metabolomic, clinical_data = 1:4, cores = 1)
try$breastfeeding%>% View
View(try$birth_type)
View(try$birth_type)
unique(try$birth_type)
unique(try$birth_type$factor)
unique(try$birth_type$factor)%>% length()
?ggtern
library(ggtern)
?ggtern
mean.feat
ternary_plot = function(fold, adjusted.p.val = T, measure="fold.change", stat="median"){
if(length(unique(fold$comp))!=3) stop("ternary_plot is meant for comparisons between three factors")
require(ggtern)
if(adjusted.p.val== T){
df=  fold %>%
filter(p.adj < 0.05) %>%
pivot_wider(names_from = comp, values_from = fold.change)
} else {
df=  fold %>%
filter(p < 0.05) %>%
pivot_wider(names_from = comp, values_from = fold.change)
}
p= df %>%
ggtern(aes(`MeCT 1`, `MeCT 2`, `MeCT 3`))+
geom_polygon(data= polygons1, aes(a, b, c, fill= label), alpha=0.3, show.legend = F)+
scale_fill_manual(values=mect_col)+
geom_crosshair_tern(data= cross,
aes(x = `MeCT 1`, y = `MeCT 2`, z = `MeCT 3`), linetype=2, )+
geom_point(aes(color=ifelse(p.adj<0.05, "FDR < 0.05",
ifelse(p<0.01,  "nFDR < 0.01", "nFDR < 0.05")), size=-log10(p)))+
geom_text(data = tmp %>%
filter(p.adj>0.05 & p<0.01), aes(label= features), size=3,  check_overlap = T, col="black",
position = position_nudge_tern(0.01, .01,.01))+
geom_text(data = tmp %>%
filter(p.adj<0.05), aes(label= features), size=3,  check_overlap = T, fontface="bold", col="black",
position = position_nudge_tern(-0.01, -.01,.01) )+
scale_color_manual(values=c("lightsalmon","#205062", "#42858C"),name="p values")+
scale_R_continuous(labels = waiver())+
Rlab(label = "MeCT 3")+
Tlab("MeCT 2")+
Llab("MeCT 1")+
theme_bw()+
theme_nomask()+
theme(axis.title = element_text(size=15))
return(^p)
ternary_plot = function(fold, adjusted.p.val = T, measure="fold.change", stat="median"){
if(length(unique(fold$comp))!=3) stop("ternary_plot is meant for comparisons between three factors")
require(ggtern)
if(adjusted.p.val== T){
df=  fold %>%
filter(p.adj < 0.05) %>%
pivot_wider(names_from = comp, values_from = fold.change)
} else {
df=  fold %>%
filter(p < 0.05) %>%
pivot_wider(names_from = comp, values_from = fold.change)
}
p= df %>%
ggtern(aes(`MeCT 1`, `MeCT 2`, `MeCT 3`))+
geom_polygon(data= polygons1, aes(a, b, c, fill= label), alpha=0.3, show.legend = F)+
scale_fill_manual(values=mect_col)+
geom_crosshair_tern(data= cross,
aes(x = `MeCT 1`, y = `MeCT 2`, z = `MeCT 3`), linetype=2, )+
geom_point(aes(color=ifelse(p.adj<0.05, "FDR < 0.05",
ifelse(p<0.01,  "nFDR < 0.01", "nFDR < 0.05")), size=-log10(p)))+
geom_text(data = tmp %>%
filter(p.adj>0.05 & p<0.01), aes(label= features), size=3,  check_overlap = T, col="black",
position = position_nudge_tern(0.01, .01,.01))+
geom_text(data = tmp %>%
filter(p.adj<0.05), aes(label= features), size=3,  check_overlap = T, fontface="bold", col="black",
position = position_nudge_tern(-0.01, -.01,.01) )+
scale_color_manual(values=c("lightsalmon","#205062", "#42858C"),name="p values")+
scale_R_continuous(labels = waiver())+
Rlab(label = "MeCT 3")+
Tlab("MeCT 2")+
Llab("MeCT 1")+
theme_bw()+
theme_nomask()+
theme(axis.title = element_text(size=15))
return(p)
}
annot2
devtools::document()
library(ImmuMicrobiome)
library(ImmuMicrobiome)
library(ImmuMicrobiome)
View(slide_z)
library(ImmuMicrobiome)
knit_with_parameters("~/ImmuMicrobiome/ImmuMicrobiome_book.Rmd")
browseVignettes("ImmuMicrobiome")
knitr::include_graphics("C:\Users\remy.villette\Documents\Documentation ImmuMicrobiome/Z test.png")
knitr::include_graphics("Documentation ImmuMicrobiome/Z test.png")
knitr::include_graphics("~/Documentation ImmuMicrobiome/Z test.png")
library(ImmuMicrobiome)
devtools::install_github("SgtVil/ImmuMicrobiome")
devtools::install_github("SgtVil/ImmuMicrobiome@master")
library(ImmuMicrobiome)
library(rstatix)
library(ggpubr)
theme_set(theme_bw()+
theme(axis.text = element_text(size=10, face="bold"),
axis.title = element_text(size=12, face="bold")))
tol21rainbow= c("#771155", "#AA4488", "#CC99BB", "#114477",
"#4477AA", "#77AADD", "#117777", "#44AAAA",
"#77CCCC", "#117744", "#44AA77", "#88CCAA",
"#777711", "#AAAA44", "#DDDD77", "#774411",
"#AA7744", "#DDAA77", "#771122", "#AA4455",
"#DD7788")
theme_set(theme_bw()+
theme(text = element_text(size=15, face="bold")))
knitr::opts_chunk$set(tidy=T,
message=F,
cache=T,
fig.show="hold",
fig.align = "center")
# knitr::include_graphics("Igaseq plots/plotly/MO101sample_id_vs_new_vs_pos_random generation_ratio_intensity_ellipse.html")
knitr::include_graphics("vignettes/MO101_random generation_.png")
# knitr::include_graphics("Igaseq plots/plotly/MO101sample_id_vs_new_vs_pos_random generation_ratio_intensity_ellipse.html")
knitr::include_graphics("/vignettes/MO101_random generation_.png")
# knitr::include_graphics("Igaseq plots/plotly/MO101sample_id_vs_new_vs_pos_random generation_ratio_intensity_ellipse.html")
knitr::include_graphics("./vignettes/MO101_random generation_.png")
getwd()
# knitr::include_graphics("Igaseq plots/plotly/MO101sample_id_vs_new_vs_pos_random generation_ratio_intensity_ellipse.html")
knitr::include_graphics("~/ImmuMicrobiome/vignettes/MO101_random generation_.png")
devtools::install_github("SgtVil/ImmuMicrobiome@master")
devtools::install_github("SgtVil/ImmuMicrobiome@master")
library(ImmuMicrobiome)
devtools::document()
warnings()
gc()
library(ImmuMicrobiome)
library(rstatix)
library(ggpubr)
theme_set(theme_bw()+
theme(axis.text = element_text(size=10, face="bold"),
axis.title = element_text(size=12, face="bold")))
tol21rainbow= c("#771155", "#AA4488", "#CC99BB", "#114477",
"#4477AA", "#77AADD", "#117777", "#44AAAA",
"#77CCCC", "#117744", "#44AA77", "#88CCAA",
"#777711", "#AAAA44", "#DDDD77", "#774411",
"#AA7744", "#DDAA77", "#771122", "#AA4455",
"#DD7788")
theme_set(theme_bw()+
theme(text = element_text(size=15, face="bold")))
knitr::opts_chunk$set(tidy=T,
message=F,
cache=T,
fig.show="hold",
fig.align = "center")
plot_plsda(results, top.loads = 20, color_vector = c("brown","orange"))
results = mixOmics::plsda(X= metabolomic[,5:217], Y= metabolomic$birth_type)
plot_plsda(results, top.loads = 20, color_vector = c("brown","orange"))
library(ImmuMicrobiome)
usethis::use_github()
git_default_branch_rediscover()
usethis::git_default_branch_rediscover()
devtools::install_github("SgtVil/ImmuMicrobiome")
usethis::use_github()
library(ImmuMicrobiome)
usethis::use_github()
devtools::install_github("SgtVil/ImmuMicrobiome")
devtools::install_github("SgtVil/ImmuMicrobiome", force=T)
browseVignettes("ImmuMicrobiome")
detach("package:ImmuMicrobiome", unload = TRUE)
devtools::install_github("SgtVil/ImmuMicrobiome", force=T, build_vignettes = T)
devtools::install_github("SgtVil/ImmuMicrobiome", force=T)
library(ImmuMicrobiome)
devtools::document()
library(ImmuMicrobiome)
detach("package:ImmuMicrobiome", unload = TRUE)
devtools::install_github("SgtVil/ImmuMicrobiome", force=T)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(ImmuMicrobiome)
ImmuMicrobiome
devtools::document()
library(ImmuMicrobiome)
browseVignettes("ImmuMicrobiome")
devtools::install_github("SgtVil/ImmuMicrobiome", force=T)
detach("package:ImmuMicrobiome", unload = TRUE)
devtools::install_github("SgtVil/ImmuMicrobiome", force=T)
